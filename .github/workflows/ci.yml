name: CI

on:
  push:

jobs:
  build:
    strategy:
      # The matrix will run all possible combinations in parallel.
      matrix:
        container: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up constants
        id: constants
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo ::set-output name=toit_archive::toit-linux.tar.gz
            echo '::set-output name=toitvm::${{ github.workspace }}/toit/bin/toit.run'
            echo '::set-output name=toitpkg::${{ github.workspace }}/build/toitpkg'
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo ::set-output name=toit_archive::toit-macos.tar.gz
            echo '::set-output name=toitvm::${{ github.workspace }}/toit/bin/toit.run'
            echo '::set-output name=toitpkg::${{ github.workspace }}/build/toitpkg'
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo ::set-output name=toit_archive::toit-windows.tar.gz
            echo '::set-output name=toitvm::${{ github.workspace }}\toit\bin\toit.run.exe'
            echo '::set-output name=toitpkg::${{ github.workspace }}\build\toitpkg.exe'
          else
            echo "UNSUPPORTED RUNNER: $RUNNER_OS"
            exit 1
          fi
        shell: bash

      # Use Go 1.17
      - name: Switch to Go 1.17
        run:
          echo "$GOROOT_1_17_X64"/bin >> $GITHUB_PATH

      - name: Go dependencies
        shell: bash
        run: |
          make go_dependencies
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Toit dependencies
        id: toit
        shell: bash
        run: |
          curl -O -L https://github.com/toitlang/toit/releases/download/v0.14.0/${{ steps.constants.outputs.toit_archive }}
          tar x -f ${{ steps.constants.outputs.toit_archive }}

      - name: Build
        run: |
          make

      # Test.
      - name: test
        env:
          TOITPKG_PATH: ${{ steps.constants.outputs.toitpkg }}
          TOITVM_PATH: ${{ steps.constants.outputs.toitvm }}
        run: |
          make test
